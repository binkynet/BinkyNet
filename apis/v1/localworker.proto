// Copyright 2019 Ewout Prangsma
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Author Ewout Prangsma
// 

syntax = "proto3";

package binkynet.v1;

option go_package = "github.com/binkynet/BinkyNet/apis/v1";
option csharp_namespace = "BinkyNet.Apis.V1";

import "types.proto";

// LocalWorkerConfigService is served by the network master and used by
// local workers to fetch their configuration.
// Network masters make themselves available in mDNS under service type "_lwcfg._binkynet._tcp".
service LocalWorkerConfigService {
  // GetConfig is used to fetch the configuration for a local worker.
  rpc GetConfig(LocalWorkerInfo) returns (stream LocalWorkerConfig);
}

// LocalWorkerControlService is served by the network master and used by
// local workers.
// Network masters make themselves available in mDNS under service type "_lwctrl._binkynet._tcp".
service LocalWorkerControlService {
  // Ping messages are send at regular intervals by local workers
  // as a heartbeat notification, as well as providing information about
  // versions.
  rpc Ping(LocalWorkerInfo) returns (Empty);

  // GetDiscoverRequests is used to allow the netmanager to request a discovery by
  // the local worker.
  // The local worker in turn responds with a SetDiscoverResult call.
  rpc GetDiscoverRequests(LocalWorkerInfo) returns (stream DiscoverRequest);

  // SetDiscoverResult is called by the local worker in response to discover requests.
  rpc SetDiscoverResult(DiscoverResult) returns (Empty);

  // GetPowerRequests is used to get a stream of power requests from the network
  // master.
  rpc GetPowerRequests(PowerRequestsOptions) returns (stream PowerState);

  // SetPowerActuals is used to send a stream of actual power statuses to 
  // the network master.
  rpc SetPowerActuals(stream PowerState) returns (Empty);

  // GetLocRequests is used to get a stream of loc requests from the network
  // master.
  // Note: Loc.actual field is not set.
  rpc GetLocRequests(LocRequestsOptions) returns (stream Loc);

  // SetLocActuals is used to send a stream of actual loc statuses to 
  // the network master.
  // Note: Loc.request field must be set to the latest request.
  rpc SetLocActuals(stream Loc) returns (Empty);

  // SetSensorActuals is used to send a stream of actual sensor statuses to 
  // the network master.
  rpc SetSensorActuals(stream Sensor) returns (Empty);

  // GetOutputRequests is used to get a stream of output requests from the network
  // master.
  rpc GetOutputRequests(OutputRequestsOptions) returns (stream Output);

  // SetOutputActuals is used to send a stream of actual output statuses to 
  // the network master.
  rpc SetOutputActuals(stream Output) returns (Empty);

  // GetSwitchRequests is used to get a stream of switch requests from the network
  // master.
  rpc GetSwitchRequests(SwitchRequestsOptions) returns (stream Switch);

  // SetSwitchActuals is used to send a stream of actual switch statuses to 
  // the network master.
  rpc SetSwitchActuals(stream Switch) returns (Empty);

  // GetClock is used to get a stream of switch current time of day from the network
  // master.
  rpc GetClock(Empty) returns (stream Clock);
}

// DiscoverRequest is sent when the netmanager wants to local worker to
// probe its locally attached devices.
message DiscoverRequest {
}

// DiscoverResult is returned in a response to a discover request by the netmanager.
message DiscoverResult {
  // ID of local worker
  string id = 1;
  // The addresses that were found
  repeated string addresses = 2;
}
