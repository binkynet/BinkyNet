// Copyright 2019 Ewout Prangsma
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Author Ewout Prangsma
// 

syntax = "proto3";

package binkynet.v1;

option go_package = "github.com/binkynet/BinkyNet/apis/v1";
option csharp_namespace = "BinkyNet.Apis.V1";

import "types.proto";

// LocalWorkerService is served by each local worker and used by
// the network controller to push configuration & state.
// Local workers make themselves available in mDNS under service type "_lw._binkynet._tcp".
service LocalWorkerService {
  // Describe is used to fetch the a stream if identyable information of a local worker.
  rpc Describe(DescribeRequest) returns (stream LocalWorkerInfo);
  // Configure is used to configure a local worker.
  rpc Configure(LocalWorkerConfig) returns (Empty);

  // DiscoverDevices is used by the netmanager to request a discovery by
  // the local worker.
  // The local worker in turn responds the found devices.
  rpc DiscoverDevices(DiscoverDevicesRequest) returns (DiscoverDevicesResult);

  // SetPowerRequests is used to change the power state of the local worker.
  rpc SetPowerRequests(stream PowerState) returns (Empty);
  // GetPowerActuals is used to fetch a stream of actual power statuses 
  // from the local workers, to the network master.
  rpc GetPowerActuals(GetPowerActualsRequest) returns (stream PowerState);

  // SetLocRequests is used to send a stream of loc requests from the network
  // master to the local worker.
  // Note: Loc.actual field is not set.
  rpc SetLocRequests(stream Loc) returns (Empty);
  // GetLocActuals is used to send a stream of actual loc statuses from
  // the local worker to the network master.
  // Note: Loc.request field must be set to the latest request.
  rpc GetLocActuals(GetLocActualsRequest) returns (stream Loc);

  // GetSensorActuals is used to send a stream of actual sensor statuses
  // from the local worker to the network master.
  rpc GetSensorActuals(GetSensorActualsRequest) returns (stream Sensor);

  // SetOutputRequests is used to get a stream of output requests from the network
  // master to the local worker.
  rpc SetOutputRequests(stream Output) returns (Empty);
  // GetOutputActuals is used to send a stream of actual output statuses from
  // the local worker to the network master.
  rpc GetOutputActuals(GetOutputActualsRequest) returns (stream Output);

  // SetSwitchRequests is used to get a stream of switch requests from the network
  // master to the local worker.
  rpc SetSwitchRequests(stream Switch) returns (Empty);
  // GetSwitchActuals is used to send a stream of actual switch statuses from
  // the local worker to the network master.
  rpc GetSwitchActuals(GetSwitchActualsRequest) returns (stream Switch);

  // SetClock is used to send a stream of current time of day from the network
  // master to the local worker.
  rpc SetClock(stream Clock) returns (Empty);
}

// Arguments of Describe request.
message DescribeRequest {
  // Nothing yet
}

// DiscoverDevicesRequest is sent when the netmanager wants to local worker to
// probe its locally attached devices.
message DiscoverDevicesRequest {
}

// DiscoverDevicesResult is returned in a response to a discover request by the netmanager.
message DiscoverDevicesResult {
  // ID of local worker
  string id = 1;
  // The addresses that were found
  repeated string addresses = 2;
}

// Request arguments for GetPowerActuals
message GetPowerActualsRequest {
  // Empty
}

// Request arguments for GetLocActuals
message GetLocActualsRequest {
  // Empty
}

// Request arguments for GetSensorActuals
message GetSensorActualsRequest {
  // Empty
}

// Request arguments for GetOutputActuals
message GetOutputActualsRequest {
  // Empty
}

// Request arguments for GetSwitchActuals
message GetSwitchActualsRequest {
  // Empty
}