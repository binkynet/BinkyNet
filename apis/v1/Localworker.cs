// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: localworker.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace BinkyNet.Apis.V1 {

  /// <summary>Holder for reflection information generated from localworker.proto</summary>
  public static partial class LocalworkerReflection {

    #region Descriptor
    /// <summary>File descriptor for localworker.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LocalworkerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFsb2NhbHdvcmtlci5wcm90bxILYmlua3luZXQudjEiBwoFRW1wdHkiUwoP",
            "TG9jYWxXb3JrZXJJbmZvEgoKAmlkGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIg",
            "ASgJEg8KB3ZlcnNpb24YAyABKAkSDgoGdXB0aW1lGAQgASgDIi4KFFBvd2Vy",
            "UmVxdWVzdHNPcHRpb25zEhYKDm1hbnVhbF9jb25maXJtGAEgASgIIhgKBVBv",
            "d2VyEg8KB2VuYWJsZWQYASABKAgiLAoSTG9jUmVxdWVzdHNPcHRpb25zEhYK",
            "Dm1hbnVhbF9jb25maXJtGAEgASgIIs4BCgNMb2MSDwoHYWRkcmVzcxgBIAEo",
            "CRINCgVzcGVlZBgCIAEoBRITCgtzcGVlZF9zdGVwcxgDIAEoBRIsCglkaXJl",
            "Y3Rpb24YBCABKA4yGS5iaW5reW5ldC52MS5Mb2NEaXJlY3Rpb24SMgoJZnVu",
            "Y3Rpb25zGAUgAygLMh8uYmlua3luZXQudjEuTG9jLkZ1bmN0aW9uc0VudHJ5",
            "GjAKDkZ1bmN0aW9uc0VudHJ5EgsKA2tleRgBIAEoBRINCgV2YWx1ZRgCIAEo",
            "CDoCOAEqKAoMTG9jRGlyZWN0aW9uEgsKB0ZPUldBUkQQABILCgdSRVZFUlNF",
            "EAEy2AIKEkxvY2FsV29ya2VyU2VydmljZRI4CgRQaW5nEhwuYmlua3luZXQu",
            "djEuTG9jYWxXb3JrZXJJbmZvGhIuYmlua3luZXQudjEuRW1wdHkSSwoQR2V0",
            "UG93ZXJSZXF1ZXN0cxIhLmJpbmt5bmV0LnYxLlBvd2VyUmVxdWVzdHNPcHRp",
            "b25zGhIuYmlua3luZXQudjEuUG93ZXIwARI7Cg9TZXRQb3dlckFjdHVhbHMS",
            "Ei5iaW5reW5ldC52MS5Qb3dlchoSLmJpbmt5bmV0LnYxLkVtcHR5KAESRQoO",
            "R2V0TG9jUmVxdWVzdHMSHy5iaW5reW5ldC52MS5Mb2NSZXF1ZXN0c09wdGlv",
            "bnMaEC5iaW5reW5ldC52MS5Mb2MwARI3Cg1TZXRMb2NBY3R1YWxzEhAuYmlu",
            "a3luZXQudjEuTG9jGhIuYmlua3luZXQudjEuRW1wdHkoAUI5WiRnaXRodWIu",
            "Y29tL2Jpbmt5bmV0L0Jpbmt5TmV0L2FwaXMvdjGqAhBCaW5reU5ldC5BcGlz",
            "LlYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::BinkyNet.Apis.V1.LocDirection), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::BinkyNet.Apis.V1.Empty), global::BinkyNet.Apis.V1.Empty.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BinkyNet.Apis.V1.LocalWorkerInfo), global::BinkyNet.Apis.V1.LocalWorkerInfo.Parser, new[]{ "Id", "Description", "Version", "Uptime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BinkyNet.Apis.V1.PowerRequestsOptions), global::BinkyNet.Apis.V1.PowerRequestsOptions.Parser, new[]{ "ManualConfirm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BinkyNet.Apis.V1.Power), global::BinkyNet.Apis.V1.Power.Parser, new[]{ "Enabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BinkyNet.Apis.V1.LocRequestsOptions), global::BinkyNet.Apis.V1.LocRequestsOptions.Parser, new[]{ "ManualConfirm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::BinkyNet.Apis.V1.Loc), global::BinkyNet.Apis.V1.Loc.Parser, new[]{ "Address", "Speed", "SpeedSteps", "Direction", "Functions" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Direction of locs
  /// </summary>
  public enum LocDirection {
    [pbr::OriginalName("FORWARD")] Forward = 0,
    [pbr::OriginalName("REVERSE")] Reverse = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Empty message
  /// </summary>
  public sealed partial class Empty : pb::IMessage<Empty> {
    private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Empty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BinkyNet.Apis.V1.LocalworkerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty(Empty other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Empty Clone() {
      return new Empty(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Empty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Empty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Empty other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Information about the local worker
  /// </summary>
  public sealed partial class LocalWorkerInfo : pb::IMessage<LocalWorkerInfo> {
    private static readonly pb::MessageParser<LocalWorkerInfo> _parser = new pb::MessageParser<LocalWorkerInfo>(() => new LocalWorkerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalWorkerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BinkyNet.Apis.V1.LocalworkerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalWorkerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalWorkerInfo(LocalWorkerInfo other) : this() {
      id_ = other.id_;
      description_ = other.description_;
      version_ = other.version_;
      uptime_ = other.uptime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalWorkerInfo Clone() {
      return new LocalWorkerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// Unique identifier of the local worker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 2;
    private string description_ = "";
    /// <summary>
    /// Human readable description of the local worker
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    /// <summary>
    /// Version of the local worker in semantic versioning format.
    /// E.g. 1.0.4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uptime" field.</summary>
    public const int UptimeFieldNumber = 4;
    private long uptime_;
    /// <summary>
    /// Uptime of the local worker in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uptime {
      get { return uptime_; }
      set {
        uptime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalWorkerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalWorkerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Description != other.Description) return false;
      if (Version != other.Version) return false;
      if (Uptime != other.Uptime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Uptime != 0L) hash ^= Uptime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Description);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (Uptime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Uptime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Uptime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uptime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalWorkerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Uptime != 0L) {
        Uptime = other.Uptime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Description = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 32: {
            Uptime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request arguments for GetPowerRequests
  /// </summary>
  public sealed partial class PowerRequestsOptions : pb::IMessage<PowerRequestsOptions> {
    private static readonly pb::MessageParser<PowerRequestsOptions> _parser = new pb::MessageParser<PowerRequestsOptions>(() => new PowerRequestsOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerRequestsOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BinkyNet.Apis.V1.LocalworkerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerRequestsOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerRequestsOptions(PowerRequestsOptions other) : this() {
      manualConfirm_ = other.manualConfirm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerRequestsOptions Clone() {
      return new PowerRequestsOptions(this);
    }

    /// <summary>Field number for the "manual_confirm" field.</summary>
    public const int ManualConfirmFieldNumber = 1;
    private bool manualConfirm_;
    /// <summary>
    /// If set, the network master must wait for an actual Power message
    /// to confirm the state transition.
    /// If not set, the network master assumes the power state is effective directly
    /// after sending the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ManualConfirm {
      get { return manualConfirm_; }
      set {
        manualConfirm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerRequestsOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerRequestsOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManualConfirm != other.ManualConfirm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ManualConfirm != false) hash ^= ManualConfirm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManualConfirm != false) {
        output.WriteRawTag(8);
        output.WriteBool(ManualConfirm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManualConfirm != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerRequestsOptions other) {
      if (other == null) {
        return;
      }
      if (other.ManualConfirm != false) {
        ManualConfirm = other.ManualConfirm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ManualConfirm = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Power message contains the requested/actual state of the power on the track.
  /// </summary>
  public sealed partial class Power : pb::IMessage<Power> {
    private static readonly pb::MessageParser<Power> _parser = new pb::MessageParser<Power>(() => new Power());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Power> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BinkyNet.Apis.V1.LocalworkerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Power() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Power(Power other) : this() {
      enabled_ = other.enabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Power Clone() {
      return new Power(this);
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 1;
    private bool enabled_;
    /// <summary>
    /// Power on/off
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Power);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Power other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enabled != other.Enabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enabled != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Power other) {
      if (other == null) {
        return;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request arguments for GetLocRequests
  /// </summary>
  public sealed partial class LocRequestsOptions : pb::IMessage<LocRequestsOptions> {
    private static readonly pb::MessageParser<LocRequestsOptions> _parser = new pb::MessageParser<LocRequestsOptions>(() => new LocRequestsOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocRequestsOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BinkyNet.Apis.V1.LocalworkerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocRequestsOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocRequestsOptions(LocRequestsOptions other) : this() {
      manualConfirm_ = other.manualConfirm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocRequestsOptions Clone() {
      return new LocRequestsOptions(this);
    }

    /// <summary>Field number for the "manual_confirm" field.</summary>
    public const int ManualConfirmFieldNumber = 1;
    private bool manualConfirm_;
    /// <summary>
    /// If set, the network master must wait for an actual Loc message
    /// to confirm the state transition.
    /// If not set, the network master assumes the power state is effective directly
    /// after sending the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ManualConfirm {
      get { return manualConfirm_; }
      set {
        manualConfirm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocRequestsOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocRequestsOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ManualConfirm != other.ManualConfirm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ManualConfirm != false) hash ^= ManualConfirm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ManualConfirm != false) {
        output.WriteRawTag(8);
        output.WriteBool(ManualConfirm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ManualConfirm != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocRequestsOptions other) {
      if (other == null) {
        return;
      }
      if (other.ManualConfirm != false) {
        ManualConfirm = other.ManualConfirm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ManualConfirm = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Loc message is used to control the speed, direction &amp; functions of a loc.
  /// </summary>
  public sealed partial class Loc : pb::IMessage<Loc> {
    private static readonly pb::MessageParser<Loc> _parser = new pb::MessageParser<Loc>(() => new Loc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Loc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::BinkyNet.Apis.V1.LocalworkerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Loc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Loc(Loc other) : this() {
      address_ = other.address_;
      speed_ = other.speed_;
      speedSteps_ = other.speedSteps_;
      direction_ = other.direction_;
      functions_ = other.functions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Loc Clone() {
      return new Loc(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    /// <summary>
    /// Addres of the loc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private int speed_;
    /// <summary>
    /// Speed in steps
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "speed_steps" field.</summary>
    public const int SpeedStepsFieldNumber = 3;
    private int speedSteps_;
    /// <summary>
    /// Maximum speed steps of this loc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpeedSteps {
      get { return speedSteps_; }
      set {
        speedSteps_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private global::BinkyNet.Apis.V1.LocDirection direction_ = 0;
    /// <summary>
    /// Direction "forward|reverse"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::BinkyNet.Apis.V1.LocDirection Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "functions" field.</summary>
    public const int FunctionsFieldNumber = 5;
    private static readonly pbc::MapField<int, bool>.Codec _map_functions_codec
        = new pbc::MapField<int, bool>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForBool(16), 42);
    private readonly pbc::MapField<int, bool> functions_ = new pbc::MapField<int, bool>();
    /// <summary>
    /// State of functions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, bool> Functions {
      get { return functions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Loc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Loc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Speed != other.Speed) return false;
      if (SpeedSteps != other.SpeedSteps) return false;
      if (Direction != other.Direction) return false;
      if (!Functions.Equals(other.Functions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (SpeedSteps != 0) hash ^= SpeedSteps.GetHashCode();
      if (Direction != 0) hash ^= Direction.GetHashCode();
      hash ^= Functions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Speed != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Speed);
      }
      if (SpeedSteps != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpeedSteps);
      }
      if (Direction != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Direction);
      }
      functions_.WriteTo(output, _map_functions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (SpeedSteps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpeedSteps);
      }
      if (Direction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      size += functions_.CalculateSize(_map_functions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Loc other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.SpeedSteps != 0) {
        SpeedSteps = other.SpeedSteps;
      }
      if (other.Direction != 0) {
        Direction = other.Direction;
      }
      functions_.Add(other.functions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Speed = input.ReadInt32();
            break;
          }
          case 24: {
            SpeedSteps = input.ReadInt32();
            break;
          }
          case 32: {
            direction_ = (global::BinkyNet.Apis.V1.LocDirection) input.ReadEnum();
            break;
          }
          case 42: {
            functions_.AddEntriesFrom(input, _map_functions_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
