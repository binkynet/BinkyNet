// Copyright 2020 Ewout Prangsma
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// Author Ewout Prangsma
// 

syntax = "proto3";

package binkynet.v1;

option go_package = "github.com/binkynet/BinkyNet/apis/v1";
option csharp_namespace = "BinkyNet.Apis.V1";

import "types.proto";

// NetworkControlService is served by the network master and used by
// users of the Binky Network to control the network.
// Network masters make themselves available in mDNS under service type "_nwctrl._binkynet._tcp".
service NetworkControlService {
  // Set the requested local worker state
  rpc SetLocalWorkerRequest(LocalWorker) returns (Empty);
  // Set the actual local worker state
  rpc SetLocalWorkerActual(LocalWorker) returns (Empty);
  // Watch local worker changes
  rpc WatchLocalWorkers(WatchOptions) returns (stream LocalWorker);

  // Set a requested device discovery state
  rpc SetDeviceDiscoveryRequest(DeviceDiscovery) returns (Empty);
  // Set an actual device discovery state
  rpc SetDeviceDiscoveryActual(DeviceDiscovery) returns (Empty);
  // Watch device discovery changes
  rpc WatchDeviceDiscoveries(WatchOptions) returns (stream DeviceDiscovery);

  // Set the actual power state
  rpc SetPowerActual(PowerState) returns (Empty);

  // Set an actual loc state
  rpc SetLocActual(Loc) returns (Empty);

  // Set an actual sensor state
  rpc SetSensorActual(Sensor) returns (Empty);

  // Set an actual output state
  rpc SetOutputActual(Output) returns (Empty);

  // Set an actual switch state
  rpc SetSwitchActual(Switch) returns (Empty);

  // Set an actual clock state
  rpc SetClockActual(binkynet.v1.Clock) returns (Empty);
  // Watch clock changes
  rpc WatchClock(WatchOptions) returns (stream binkynet.v1.Clock);
}

message WatchOptions {
  // If set, send changes in request state
  bool watch_request_changes = 1;
  // If set, send changes in actual state
  bool watch_actual_changes = 2;
  // If set, send changes related to this and global module only
  string module_id = 3;
}
