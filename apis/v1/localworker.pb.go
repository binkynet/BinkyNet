// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: localworker.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("localworker.proto", fileDescriptor_4d9116c22e0c2dd1) }

var fileDescriptor_4d9116c22e0c2dd1 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0xc9, 0x4f, 0x4e,
	0xcc, 0x29, 0xcf, 0x2f, 0xca, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e,
	0xca, 0xcc, 0xcb, 0xae, 0xcc, 0x4b, 0x2d, 0xd1, 0x2b, 0x33, 0x94, 0xe2, 0x2e, 0xa9, 0x2c, 0x48,
	0x2d, 0x86, 0xc8, 0x18, 0xdd, 0x60, 0xe2, 0x12, 0xf2, 0x01, 0xa9, 0x0f, 0x07, 0xab, 0x0f, 0x4e,
	0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xb2, 0xe0, 0x62, 0x09, 0xc8, 0xcc, 0x4b, 0x17, 0x92, 0xd1,
	0x43, 0xd2, 0xa9, 0x87, 0xa4, 0xd0, 0x33, 0x2f, 0x2d, 0x5f, 0x4a, 0x08, 0x45, 0xd6, 0x35, 0xb7,
	0xa0, 0xa4, 0x52, 0xc8, 0x9b, 0x4b, 0xc0, 0x3d, 0xb5, 0x24, 0x20, 0xbf, 0x3c, 0xb5, 0x28, 0x28,
	0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0xa4, 0x58, 0x48, 0x11, 0x45, 0x1d, 0x8a, 0x9c, 0x7f, 0x41, 0x49,
	0x66, 0x7e, 0x5e, 0x31, 0x9a, 0x51, 0x60, 0x25, 0x06, 0x8c, 0x42, 0xd6, 0x5c, 0xfc, 0xc1, 0x50,
	0xc3, 0x1c, 0x93, 0x4b, 0x4a, 0x13, 0x73, 0x8a, 0x85, 0xb0, 0x28, 0xc4, 0xe6, 0x0e, 0x0d, 0x46,
	0x21, 0x57, 0x2e, 0x3e, 0xf7, 0xd4, 0x12, 0x9f, 0xfc, 0x64, 0xb8, 0x3b, 0xe4, 0xd1, 0x7d, 0x83,
	0xee, 0x0a, 0x01, 0x74, 0x05, 0x06, 0x8c, 0x42, 0xe6, 0x5c, 0xbc, 0xc1, 0x60, 0x63, 0x60, 0x2e,
	0xc0, 0x50, 0x84, 0xdd, 0x7e, 0x27, 0xcf, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x95, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24,
	0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x98, 0x0e, 0x7d, 0x27, 0x10, 0xc3, 0x2f, 0xb5, 0x44, 0x3f, 0xb1,
	0x20, 0xb3, 0x58, 0xbf, 0xcc, 0x70, 0x15, 0x93, 0x00, 0x4c, 0x48, 0xcf, 0xb1, 0x20, 0xb3, 0x58,
	0x2f, 0xcc, 0x30, 0x89, 0x0d, 0x1c, 0x59, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x16, 0x85,
	0xf5, 0x28, 0xdb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LocalWorkerServiceClient is the client API for LocalWorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalWorkerServiceClient interface {
	// Ping messages are send at regular intervals by local workers
	// as a heartbeat notification, as well as providing information about
	// versions.
	Ping(ctx context.Context, in *LocalWorkerInfo, opts ...grpc.CallOption) (*Empty, error)
	// GetPowerRequests is used to get a stream of power requests from the network
	// master.
	GetPowerRequests(ctx context.Context, in *PowerRequestsOptions, opts ...grpc.CallOption) (LocalWorkerService_GetPowerRequestsClient, error)
	// SetPowerActuals is used to send a stream of actual power statuses to
	// the network master.
	SetPowerActuals(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetPowerActualsClient, error)
	// GetLocRequests is used to get a stream of loc requests from the network
	// master.
	GetLocRequests(ctx context.Context, in *LocRequestsOptions, opts ...grpc.CallOption) (LocalWorkerService_GetLocRequestsClient, error)
	// SetLocActuals is used to send a stream of actual loc statuses to
	// the network master.
	SetLocActuals(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetLocActualsClient, error)
}

type localWorkerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLocalWorkerServiceClient(cc *grpc.ClientConn) LocalWorkerServiceClient {
	return &localWorkerServiceClient{cc}
}

func (c *localWorkerServiceClient) Ping(ctx context.Context, in *LocalWorkerInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/binkynet.v1.LocalWorkerService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localWorkerServiceClient) GetPowerRequests(ctx context.Context, in *PowerRequestsOptions, opts ...grpc.CallOption) (LocalWorkerService_GetPowerRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[0], "/binkynet.v1.LocalWorkerService/GetPowerRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceGetPowerRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalWorkerService_GetPowerRequestsClient interface {
	Recv() (*Power, error)
	grpc.ClientStream
}

type localWorkerServiceGetPowerRequestsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceGetPowerRequestsClient) Recv() (*Power, error) {
	m := new(Power)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) SetPowerActuals(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetPowerActualsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[1], "/binkynet.v1.LocalWorkerService/SetPowerActuals", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceSetPowerActualsClient{stream}
	return x, nil
}

type LocalWorkerService_SetPowerActualsClient interface {
	Send(*Power) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type localWorkerServiceSetPowerActualsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceSetPowerActualsClient) Send(m *Power) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localWorkerServiceSetPowerActualsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) GetLocRequests(ctx context.Context, in *LocRequestsOptions, opts ...grpc.CallOption) (LocalWorkerService_GetLocRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[2], "/binkynet.v1.LocalWorkerService/GetLocRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceGetLocRequestsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalWorkerService_GetLocRequestsClient interface {
	Recv() (*Loc, error)
	grpc.ClientStream
}

type localWorkerServiceGetLocRequestsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceGetLocRequestsClient) Recv() (*Loc, error) {
	m := new(Loc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) SetLocActuals(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetLocActualsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[3], "/binkynet.v1.LocalWorkerService/SetLocActuals", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceSetLocActualsClient{stream}
	return x, nil
}

type LocalWorkerService_SetLocActualsClient interface {
	Send(*Loc) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type localWorkerServiceSetLocActualsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceSetLocActualsClient) Send(m *Loc) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localWorkerServiceSetLocActualsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocalWorkerServiceServer is the server API for LocalWorkerService service.
type LocalWorkerServiceServer interface {
	// Ping messages are send at regular intervals by local workers
	// as a heartbeat notification, as well as providing information about
	// versions.
	Ping(context.Context, *LocalWorkerInfo) (*Empty, error)
	// GetPowerRequests is used to get a stream of power requests from the network
	// master.
	GetPowerRequests(*PowerRequestsOptions, LocalWorkerService_GetPowerRequestsServer) error
	// SetPowerActuals is used to send a stream of actual power statuses to
	// the network master.
	SetPowerActuals(LocalWorkerService_SetPowerActualsServer) error
	// GetLocRequests is used to get a stream of loc requests from the network
	// master.
	GetLocRequests(*LocRequestsOptions, LocalWorkerService_GetLocRequestsServer) error
	// SetLocActuals is used to send a stream of actual loc statuses to
	// the network master.
	SetLocActuals(LocalWorkerService_SetLocActualsServer) error
}

// UnimplementedLocalWorkerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLocalWorkerServiceServer struct {
}

func (*UnimplementedLocalWorkerServiceServer) Ping(ctx context.Context, req *LocalWorkerInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) GetPowerRequests(req *PowerRequestsOptions, srv LocalWorkerService_GetPowerRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPowerRequests not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) SetPowerActuals(srv LocalWorkerService_SetPowerActualsServer) error {
	return status.Errorf(codes.Unimplemented, "method SetPowerActuals not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) GetLocRequests(req *LocRequestsOptions, srv LocalWorkerService_GetLocRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLocRequests not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) SetLocActuals(srv LocalWorkerService_SetLocActualsServer) error {
	return status.Errorf(codes.Unimplemented, "method SetLocActuals not implemented")
}

func RegisterLocalWorkerServiceServer(s *grpc.Server, srv LocalWorkerServiceServer) {
	s.RegisterService(&_LocalWorkerService_serviceDesc, srv)
}

func _LocalWorkerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalWorkerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalWorkerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkynet.v1.LocalWorkerService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalWorkerServiceServer).Ping(ctx, req.(*LocalWorkerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalWorkerService_GetPowerRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PowerRequestsOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalWorkerServiceServer).GetPowerRequests(m, &localWorkerServiceGetPowerRequestsServer{stream})
}

type LocalWorkerService_GetPowerRequestsServer interface {
	Send(*Power) error
	grpc.ServerStream
}

type localWorkerServiceGetPowerRequestsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceGetPowerRequestsServer) Send(m *Power) error {
	return x.ServerStream.SendMsg(m)
}

func _LocalWorkerService_SetPowerActuals_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalWorkerServiceServer).SetPowerActuals(&localWorkerServiceSetPowerActualsServer{stream})
}

type LocalWorkerService_SetPowerActualsServer interface {
	SendAndClose(*Empty) error
	Recv() (*Power, error)
	grpc.ServerStream
}

type localWorkerServiceSetPowerActualsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceSetPowerActualsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localWorkerServiceSetPowerActualsServer) Recv() (*Power, error) {
	m := new(Power)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalWorkerService_GetLocRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LocRequestsOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalWorkerServiceServer).GetLocRequests(m, &localWorkerServiceGetLocRequestsServer{stream})
}

type LocalWorkerService_GetLocRequestsServer interface {
	Send(*Loc) error
	grpc.ServerStream
}

type localWorkerServiceGetLocRequestsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceGetLocRequestsServer) Send(m *Loc) error {
	return x.ServerStream.SendMsg(m)
}

func _LocalWorkerService_SetLocActuals_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalWorkerServiceServer).SetLocActuals(&localWorkerServiceSetLocActualsServer{stream})
}

type LocalWorkerService_SetLocActualsServer interface {
	SendAndClose(*Empty) error
	Recv() (*Loc, error)
	grpc.ServerStream
}

type localWorkerServiceSetLocActualsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceSetLocActualsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localWorkerServiceSetLocActualsServer) Recv() (*Loc, error) {
	m := new(Loc)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LocalWorkerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "binkynet.v1.LocalWorkerService",
	HandlerType: (*LocalWorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LocalWorkerService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPowerRequests",
			Handler:       _LocalWorkerService_GetPowerRequests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetPowerActuals",
			Handler:       _LocalWorkerService_SetPowerActuals_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLocRequests",
			Handler:       _LocalWorkerService_GetLocRequests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetLocActuals",
			Handler:       _LocalWorkerService_SetLocActuals_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "localworker.proto",
}
