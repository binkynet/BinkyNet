// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: localworker.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request arguments for GetFeatures
type GetFeaturesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFeaturesRequest) Reset()         { *m = GetFeaturesRequest{} }
func (m *GetFeaturesRequest) String() string { return proto.CompactTextString(m) }
func (*GetFeaturesRequest) ProtoMessage()    {}
func (*GetFeaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d9116c22e0c2dd1, []int{0}
}
func (m *GetFeaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetFeaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetFeaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetFeaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeaturesRequest.Merge(m, src)
}
func (m *GetFeaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetFeaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeaturesRequest proto.InternalMessageInfo

// Response for GetFeatures
type Features struct {
	// This local worker supports controlling power
	Power bool `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`
	// This local worker supports controlling locs
	Locs bool `protobuf:"varint,2,opt,name=locs,proto3" json:"locs,omitempty"`
	// This local worker supports controlling outputs
	Outputs bool `protobuf:"varint,3,opt,name=outputs,proto3" json:"outputs,omitempty"`
	// This local worker supports controlling sensors
	Sensors bool `protobuf:"varint,4,opt,name=sensors,proto3" json:"sensors,omitempty"`
	// This local worker supports controlling switches
	Switches bool `protobuf:"varint,5,opt,name=switches,proto3" json:"switches,omitempty"`
	// This local worker supports receiving a clock signal
	Clock                bool     `protobuf:"varint,6,opt,name=clock,proto3" json:"clock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Features) Reset()         { *m = Features{} }
func (m *Features) String() string { return proto.CompactTextString(m) }
func (*Features) ProtoMessage()    {}
func (*Features) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d9116c22e0c2dd1, []int{1}
}
func (m *Features) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Features) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Features.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Features) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Features.Merge(m, src)
}
func (m *Features) XXX_Size() int {
	return m.Size()
}
func (m *Features) XXX_DiscardUnknown() {
	xxx_messageInfo_Features.DiscardUnknown(m)
}

var xxx_messageInfo_Features proto.InternalMessageInfo

func (m *Features) GetPower() bool {
	if m != nil {
		return m.Power
	}
	return false
}

func (m *Features) GetLocs() bool {
	if m != nil {
		return m.Locs
	}
	return false
}

func (m *Features) GetOutputs() bool {
	if m != nil {
		return m.Outputs
	}
	return false
}

func (m *Features) GetSensors() bool {
	if m != nil {
		return m.Sensors
	}
	return false
}

func (m *Features) GetSwitches() bool {
	if m != nil {
		return m.Switches
	}
	return false
}

func (m *Features) GetClock() bool {
	if m != nil {
		return m.Clock
	}
	return false
}

// Arguments of Describe request.
type DescribeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DescribeRequest) Reset()         { *m = DescribeRequest{} }
func (m *DescribeRequest) String() string { return proto.CompactTextString(m) }
func (*DescribeRequest) ProtoMessage()    {}
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d9116c22e0c2dd1, []int{2}
}
func (m *DescribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DescribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DescribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DescribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DescribeRequest.Merge(m, src)
}
func (m *DescribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DescribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DescribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DescribeRequest proto.InternalMessageInfo

// DiscoverDevicesRequest is sent when the netmanager wants to local worker to
// probe its locally attached devices.
type DiscoverDevicesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverDevicesRequest) Reset()         { *m = DiscoverDevicesRequest{} }
func (m *DiscoverDevicesRequest) String() string { return proto.CompactTextString(m) }
func (*DiscoverDevicesRequest) ProtoMessage()    {}
func (*DiscoverDevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d9116c22e0c2dd1, []int{3}
}
func (m *DiscoverDevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoverDevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoverDevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoverDevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverDevicesRequest.Merge(m, src)
}
func (m *DiscoverDevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *DiscoverDevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverDevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverDevicesRequest proto.InternalMessageInfo

// DiscoverDevicesResult is returned in a response to a discover request by the netmanager.
type DiscoverDevicesResult struct {
	// ID of local worker
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The addresses that were found
	Addresses            []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoverDevicesResult) Reset()         { *m = DiscoverDevicesResult{} }
func (m *DiscoverDevicesResult) String() string { return proto.CompactTextString(m) }
func (*DiscoverDevicesResult) ProtoMessage()    {}
func (*DiscoverDevicesResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d9116c22e0c2dd1, []int{4}
}
func (m *DiscoverDevicesResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoverDevicesResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoverDevicesResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoverDevicesResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverDevicesResult.Merge(m, src)
}
func (m *DiscoverDevicesResult) XXX_Size() int {
	return m.Size()
}
func (m *DiscoverDevicesResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverDevicesResult.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverDevicesResult proto.InternalMessageInfo

func (m *DiscoverDevicesResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DiscoverDevicesResult) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// Request arguments for GetPowerActuals
type GetPowerActualsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPowerActualsRequest) Reset()         { *m = GetPowerActualsRequest{} }
func (m *GetPowerActualsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPowerActualsRequest) ProtoMessage()    {}
func (*GetPowerActualsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d9116c22e0c2dd1, []int{5}
}
func (m *GetPowerActualsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPowerActualsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPowerActualsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetPowerActualsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPowerActualsRequest.Merge(m, src)
}
func (m *GetPowerActualsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetPowerActualsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPowerActualsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPowerActualsRequest proto.InternalMessageInfo

// Request arguments for GetLocActuals
type GetLocActualsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLocActualsRequest) Reset()         { *m = GetLocActualsRequest{} }
func (m *GetLocActualsRequest) String() string { return proto.CompactTextString(m) }
func (*GetLocActualsRequest) ProtoMessage()    {}
func (*GetLocActualsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d9116c22e0c2dd1, []int{6}
}
func (m *GetLocActualsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLocActualsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLocActualsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetLocActualsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLocActualsRequest.Merge(m, src)
}
func (m *GetLocActualsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetLocActualsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLocActualsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLocActualsRequest proto.InternalMessageInfo

// Request arguments for GetSensorActuals
type GetSensorActualsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSensorActualsRequest) Reset()         { *m = GetSensorActualsRequest{} }
func (m *GetSensorActualsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSensorActualsRequest) ProtoMessage()    {}
func (*GetSensorActualsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d9116c22e0c2dd1, []int{7}
}
func (m *GetSensorActualsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSensorActualsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSensorActualsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSensorActualsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSensorActualsRequest.Merge(m, src)
}
func (m *GetSensorActualsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSensorActualsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSensorActualsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSensorActualsRequest proto.InternalMessageInfo

// Request arguments for GetOutputActuals
type GetOutputActualsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOutputActualsRequest) Reset()         { *m = GetOutputActualsRequest{} }
func (m *GetOutputActualsRequest) String() string { return proto.CompactTextString(m) }
func (*GetOutputActualsRequest) ProtoMessage()    {}
func (*GetOutputActualsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d9116c22e0c2dd1, []int{8}
}
func (m *GetOutputActualsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOutputActualsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOutputActualsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOutputActualsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOutputActualsRequest.Merge(m, src)
}
func (m *GetOutputActualsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOutputActualsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOutputActualsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOutputActualsRequest proto.InternalMessageInfo

// Request arguments for GetSwitchActuals
type GetSwitchActualsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSwitchActualsRequest) Reset()         { *m = GetSwitchActualsRequest{} }
func (m *GetSwitchActualsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSwitchActualsRequest) ProtoMessage()    {}
func (*GetSwitchActualsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d9116c22e0c2dd1, []int{9}
}
func (m *GetSwitchActualsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSwitchActualsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSwitchActualsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSwitchActualsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSwitchActualsRequest.Merge(m, src)
}
func (m *GetSwitchActualsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSwitchActualsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSwitchActualsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSwitchActualsRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetFeaturesRequest)(nil), "binkynet.v1.GetFeaturesRequest")
	proto.RegisterType((*Features)(nil), "binkynet.v1.Features")
	proto.RegisterType((*DescribeRequest)(nil), "binkynet.v1.DescribeRequest")
	proto.RegisterType((*DiscoverDevicesRequest)(nil), "binkynet.v1.DiscoverDevicesRequest")
	proto.RegisterType((*DiscoverDevicesResult)(nil), "binkynet.v1.DiscoverDevicesResult")
	proto.RegisterType((*GetPowerActualsRequest)(nil), "binkynet.v1.GetPowerActualsRequest")
	proto.RegisterType((*GetLocActualsRequest)(nil), "binkynet.v1.GetLocActualsRequest")
	proto.RegisterType((*GetSensorActualsRequest)(nil), "binkynet.v1.GetSensorActualsRequest")
	proto.RegisterType((*GetOutputActualsRequest)(nil), "binkynet.v1.GetOutputActualsRequest")
	proto.RegisterType((*GetSwitchActualsRequest)(nil), "binkynet.v1.GetSwitchActualsRequest")
}

func init() { proto.RegisterFile("localworker.proto", fileDescriptor_4d9116c22e0c2dd1) }

var fileDescriptor_4d9116c22e0c2dd1 = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xcd, 0x6e, 0xd3, 0x4e,
	0x10, 0xff, 0x6f, 0xfa, 0xf1, 0x77, 0xa6, 0xa2, 0x4d, 0x87, 0x7e, 0x18, 0xab, 0x0a, 0x10, 0x7a,
	0xe8, 0xc9, 0x49, 0x81, 0x03, 0x27, 0x50, 0x3f, 0x43, 0xa5, 0x8a, 0x42, 0x2c, 0x81, 0xd4, 0x9b,
	0xe3, 0x4c, 0x5b, 0xab, 0x6e, 0xd6, 0x78, 0xd7, 0xa9, 0x7a, 0xe6, 0x25, 0x10, 0x8f, 0xc0, 0x93,
	0x70, 0xe4, 0x11, 0x50, 0x79, 0x11, 0xe4, 0x75, 0xed, 0x66, 0x9d, 0x4d, 0x6f, 0x9e, 0xf9, 0xcd,
	0xec, 0xfc, 0x66, 0x7e, 0x33, 0x09, 0x2c, 0x47, 0x3c, 0xf0, 0xa3, 0x6b, 0x9e, 0x5c, 0x52, 0xe2,
	0xc6, 0x09, 0x97, 0x1c, 0x17, 0xfa, 0xe1, 0xf0, 0xf2, 0x66, 0x48, 0xd2, 0x1d, 0x6d, 0x3b, 0x0b,
	0xf2, 0x26, 0x26, 0x91, 0x23, 0xad, 0x15, 0xc0, 0x2e, 0xc9, 0x43, 0xf2, 0x65, 0x9a, 0x90, 0xe8,
	0xd1, 0xd7, 0x94, 0x84, 0x6c, 0xfd, 0x60, 0x60, 0x15, 0x3e, 0x5c, 0x81, 0xb9, 0x98, 0x5f, 0x53,
	0x62, 0xb3, 0x67, 0x6c, 0xcb, 0xea, 0xe5, 0x06, 0x22, 0xcc, 0x46, 0x3c, 0x10, 0x76, 0x4d, 0x39,
	0xd5, 0x37, 0xda, 0xf0, 0x3f, 0x4f, 0x65, 0x9c, 0x4a, 0x61, 0xcf, 0x28, 0x77, 0x61, 0x66, 0x88,
	0xa0, 0xa1, 0xe0, 0x89, 0xb0, 0x67, 0x73, 0xe4, 0xce, 0x44, 0x07, 0x2c, 0x71, 0x1d, 0xca, 0xe0,
	0x82, 0x84, 0x3d, 0xa7, 0xa0, 0xd2, 0xce, 0x2a, 0x07, 0x11, 0x0f, 0x2e, 0xed, 0xf9, 0xbc, 0xb2,
	0x32, 0x5a, 0xcb, 0xb0, 0xb4, 0x4f, 0x22, 0x48, 0xc2, 0x3e, 0x15, 0x7c, 0x6d, 0x58, 0xdb, 0x0f,
	0x45, 0xc0, 0x47, 0x94, 0xec, 0xd3, 0x28, 0x0c, 0xee, 0x3b, 0x39, 0x80, 0xd5, 0x09, 0x44, 0xa4,
	0x91, 0xc4, 0x45, 0xa8, 0x85, 0x03, 0xd5, 0x52, 0xbd, 0x57, 0x0b, 0x07, 0xb8, 0x01, 0x75, 0x7f,
	0x30, 0x48, 0x48, 0x08, 0xca, 0x9a, 0x9a, 0xd9, 0xaa, 0xf7, 0xee, 0x1d, 0x59, 0x81, 0x2e, 0xc9,
	0x8f, 0x59, 0xe7, 0x3b, 0x81, 0x4c, 0xfd, 0xa8, 0x2c, 0xb0, 0x06, 0x2b, 0x5d, 0x92, 0xc7, 0x3c,
	0xa8, 0xf8, 0x9f, 0xc0, 0x7a, 0x97, 0xa4, 0xa7, 0xba, 0x34, 0x42, 0x27, 0x6a, 0x34, 0xe6, 0x2c,
	0x35, 0x00, 0x1d, 0x7a, 0xf9, 0xcd, 0x02, 0x3c, 0xce, 0x94, 0xfd, 0xa2, 0x94, 0xf5, 0x28, 0xc9,
	0xda, 0xc1, 0x03, 0x58, 0x18, 0x13, 0x10, 0x9f, 0xba, 0x63, 0x52, 0xbb, 0x93, 0xd2, 0x3a, 0xab,
	0x5a, 0x40, 0x99, 0xf7, 0x1e, 0xac, 0x62, 0xa8, 0xb8, 0xa1, 0x85, 0x54, 0x66, 0xed, 0xe8, 0xe8,
	0x18, 0xa3, 0xa3, 0xe1, 0x19, 0xef, 0x30, 0x7c, 0x07, 0xf5, 0x3d, 0x3e, 0x3c, 0x0b, 0xcf, 0xd3,
	0x84, 0xb0, 0x39, 0x2d, 0x38, 0x0f, 0x71, 0x50, 0xc3, 0x0f, 0xae, 0x62, 0x79, 0x83, 0xa7, 0xb0,
	0x54, 0x91, 0x0c, 0x5f, 0xe8, 0x8c, 0x8c, 0x52, 0x3b, 0xad, 0x87, 0x83, 0x94, 0xea, 0x3b, 0xd0,
	0xf0, 0xee, 0x74, 0xbc, 0x4b, 0x13, 0xb8, 0xae, 0xe5, 0x29, 0xcc, 0x93, 0xbe, 0x24, 0x13, 0xb9,
	0x2d, 0x86, 0x9f, 0x60, 0xa9, 0xb2, 0x0a, 0x15, 0x7a, 0xe6, 0x45, 0x71, 0xa6, 0x95, 0xe9, 0x30,
	0x7c, 0x03, 0x8b, 0x9e, 0xda, 0xa1, 0x92, 0x53, 0xa3, 0x3a, 0xb7, 0x29, 0x64, 0x0e, 0xe1, 0x91,
	0xb6, 0x7d, 0xf8, 0xbc, 0x4a, 0x65, 0x62, 0x33, 0x9d, 0x89, 0xb7, 0x3b, 0x0c, 0x4f, 0xa0, 0x51,
	0xdd, 0x56, 0xdc, 0xac, 0x3e, 0x65, 0x5a, 0x66, 0xe7, 0xb1, 0x16, 0x95, 0x87, 0x74, 0x18, 0xbe,
	0x85, 0x65, 0xaf, 0xd8, 0xf1, 0xb2, 0x2b, 0x3d, 0x36, 0x07, 0xa7, 0x34, 0x96, 0x13, 0xd2, 0x6e,
	0x64, 0x92, 0x90, 0xe9, 0x84, 0x1c, 0x53, 0x91, 0x92, 0x50, 0x7e, 0x59, 0x53, 0x08, 0xe5, 0xe0,
	0x83, 0x84, 0xb4, 0xcb, 0x34, 0x4c, 0xc8, 0x70, 0xb8, 0x8e, 0xa9, 0x48, 0x87, 0xe1, 0x6b, 0xb0,
	0x3c, 0x92, 0x7b, 0xd9, 0x4f, 0x1a, 0xea, 0x25, 0x95, 0xcf, 0x4c, 0x63, 0xf7, 0xe8, 0xd7, 0x6d,
	0x93, 0xfd, 0xbe, 0x6d, 0xb2, 0x3f, 0xb7, 0x4d, 0xf6, 0xfd, 0x6f, 0xf3, 0xbf, 0xd3, 0xcd, 0xf3,
	0x50, 0x5e, 0xa4, 0x7d, 0x37, 0xe0, 0x57, 0xed, 0x22, 0xa3, 0xbd, 0x9b, 0x7d, 0x7c, 0x20, 0xd9,
	0xf6, 0xe3, 0x50, 0xb4, 0x47, 0xdb, 0x3f, 0x6b, 0x8d, 0xc2, 0xe5, 0xee, 0xc4, 0xa1, 0x70, 0x3f,
	0x6f, 0xf7, 0xe7, 0xd5, 0x3f, 0xc0, 0xab, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x65, 0x70, 0xb7,
	0x09, 0x30, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LocalWorkerServiceClient is the client API for LocalWorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalWorkerServiceClient interface {
	// Gets the features supported by this local worker
	GetFeatures(ctx context.Context, in *GetFeaturesRequest, opts ...grpc.CallOption) (*Features, error)
	// Describe is used to fetch the a stream if identyable information of a local worker.
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (LocalWorkerService_DescribeClient, error)
	// Configure is used to configure a local worker.
	Configure(ctx context.Context, in *LocalWorkerConfig, opts ...grpc.CallOption) (*Empty, error)
	// DiscoverDevices is used by the netmanager to request a discovery by
	// the local worker.
	// The local worker in turn responds the found devices.
	DiscoverDevices(ctx context.Context, in *DiscoverDevicesRequest, opts ...grpc.CallOption) (*DiscoverDevicesResult, error)
	// SetPowerRequests is used to change the power state of the local worker.
	SetPowerRequests(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetPowerRequestsClient, error)
	// GetPowerActuals is used to fetch a stream of actual power statuses
	// from the local workers, to the network master.
	GetPowerActuals(ctx context.Context, in *GetPowerActualsRequest, opts ...grpc.CallOption) (LocalWorkerService_GetPowerActualsClient, error)
	// SetLocRequests is used to send a stream of loc requests from the network
	// master to the local worker.
	// Note: Loc.actual field is not set.
	SetLocRequests(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetLocRequestsClient, error)
	// GetLocActuals is used to send a stream of actual loc statuses from
	// the local worker to the network master.
	// Note: Loc.request field must be set to the latest request.
	GetLocActuals(ctx context.Context, in *GetLocActualsRequest, opts ...grpc.CallOption) (LocalWorkerService_GetLocActualsClient, error)
	// GetSensorActuals is used to send a stream of actual sensor statuses
	// from the local worker to the network master.
	GetSensorActuals(ctx context.Context, in *GetSensorActualsRequest, opts ...grpc.CallOption) (LocalWorkerService_GetSensorActualsClient, error)
	// SetOutputRequests is used to get a stream of output requests from the network
	// master to the local worker.
	SetOutputRequests(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetOutputRequestsClient, error)
	// GetOutputActuals is used to send a stream of actual output statuses from
	// the local worker to the network master.
	GetOutputActuals(ctx context.Context, in *GetOutputActualsRequest, opts ...grpc.CallOption) (LocalWorkerService_GetOutputActualsClient, error)
	// SetSwitchRequests is used to get a stream of switch requests from the network
	// master to the local worker.
	SetSwitchRequests(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetSwitchRequestsClient, error)
	// GetSwitchActuals is used to send a stream of actual switch statuses from
	// the local worker to the network master.
	GetSwitchActuals(ctx context.Context, in *GetSwitchActualsRequest, opts ...grpc.CallOption) (LocalWorkerService_GetSwitchActualsClient, error)
	// SetClock is used to send a stream of current time of day from the network
	// master to the local worker.
	SetClock(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetClockClient, error)
}

type localWorkerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLocalWorkerServiceClient(cc *grpc.ClientConn) LocalWorkerServiceClient {
	return &localWorkerServiceClient{cc}
}

func (c *localWorkerServiceClient) GetFeatures(ctx context.Context, in *GetFeaturesRequest, opts ...grpc.CallOption) (*Features, error) {
	out := new(Features)
	err := c.cc.Invoke(ctx, "/binkynet.v1.LocalWorkerService/GetFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localWorkerServiceClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (LocalWorkerService_DescribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[0], "/binkynet.v1.LocalWorkerService/Describe", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceDescribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalWorkerService_DescribeClient interface {
	Recv() (*LocalWorkerInfo, error)
	grpc.ClientStream
}

type localWorkerServiceDescribeClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceDescribeClient) Recv() (*LocalWorkerInfo, error) {
	m := new(LocalWorkerInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) Configure(ctx context.Context, in *LocalWorkerConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/binkynet.v1.LocalWorkerService/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localWorkerServiceClient) DiscoverDevices(ctx context.Context, in *DiscoverDevicesRequest, opts ...grpc.CallOption) (*DiscoverDevicesResult, error) {
	out := new(DiscoverDevicesResult)
	err := c.cc.Invoke(ctx, "/binkynet.v1.LocalWorkerService/DiscoverDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localWorkerServiceClient) SetPowerRequests(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetPowerRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[1], "/binkynet.v1.LocalWorkerService/SetPowerRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceSetPowerRequestsClient{stream}
	return x, nil
}

type LocalWorkerService_SetPowerRequestsClient interface {
	Send(*PowerState) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type localWorkerServiceSetPowerRequestsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceSetPowerRequestsClient) Send(m *PowerState) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localWorkerServiceSetPowerRequestsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) GetPowerActuals(ctx context.Context, in *GetPowerActualsRequest, opts ...grpc.CallOption) (LocalWorkerService_GetPowerActualsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[2], "/binkynet.v1.LocalWorkerService/GetPowerActuals", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceGetPowerActualsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalWorkerService_GetPowerActualsClient interface {
	Recv() (*PowerState, error)
	grpc.ClientStream
}

type localWorkerServiceGetPowerActualsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceGetPowerActualsClient) Recv() (*PowerState, error) {
	m := new(PowerState)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) SetLocRequests(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetLocRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[3], "/binkynet.v1.LocalWorkerService/SetLocRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceSetLocRequestsClient{stream}
	return x, nil
}

type LocalWorkerService_SetLocRequestsClient interface {
	Send(*Loc) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type localWorkerServiceSetLocRequestsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceSetLocRequestsClient) Send(m *Loc) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localWorkerServiceSetLocRequestsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) GetLocActuals(ctx context.Context, in *GetLocActualsRequest, opts ...grpc.CallOption) (LocalWorkerService_GetLocActualsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[4], "/binkynet.v1.LocalWorkerService/GetLocActuals", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceGetLocActualsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalWorkerService_GetLocActualsClient interface {
	Recv() (*Loc, error)
	grpc.ClientStream
}

type localWorkerServiceGetLocActualsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceGetLocActualsClient) Recv() (*Loc, error) {
	m := new(Loc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) GetSensorActuals(ctx context.Context, in *GetSensorActualsRequest, opts ...grpc.CallOption) (LocalWorkerService_GetSensorActualsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[5], "/binkynet.v1.LocalWorkerService/GetSensorActuals", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceGetSensorActualsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalWorkerService_GetSensorActualsClient interface {
	Recv() (*Sensor, error)
	grpc.ClientStream
}

type localWorkerServiceGetSensorActualsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceGetSensorActualsClient) Recv() (*Sensor, error) {
	m := new(Sensor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) SetOutputRequests(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetOutputRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[6], "/binkynet.v1.LocalWorkerService/SetOutputRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceSetOutputRequestsClient{stream}
	return x, nil
}

type LocalWorkerService_SetOutputRequestsClient interface {
	Send(*Output) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type localWorkerServiceSetOutputRequestsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceSetOutputRequestsClient) Send(m *Output) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localWorkerServiceSetOutputRequestsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) GetOutputActuals(ctx context.Context, in *GetOutputActualsRequest, opts ...grpc.CallOption) (LocalWorkerService_GetOutputActualsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[7], "/binkynet.v1.LocalWorkerService/GetOutputActuals", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceGetOutputActualsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalWorkerService_GetOutputActualsClient interface {
	Recv() (*Output, error)
	grpc.ClientStream
}

type localWorkerServiceGetOutputActualsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceGetOutputActualsClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) SetSwitchRequests(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetSwitchRequestsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[8], "/binkynet.v1.LocalWorkerService/SetSwitchRequests", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceSetSwitchRequestsClient{stream}
	return x, nil
}

type LocalWorkerService_SetSwitchRequestsClient interface {
	Send(*Switch) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type localWorkerServiceSetSwitchRequestsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceSetSwitchRequestsClient) Send(m *Switch) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localWorkerServiceSetSwitchRequestsClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) GetSwitchActuals(ctx context.Context, in *GetSwitchActualsRequest, opts ...grpc.CallOption) (LocalWorkerService_GetSwitchActualsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[9], "/binkynet.v1.LocalWorkerService/GetSwitchActuals", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceGetSwitchActualsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalWorkerService_GetSwitchActualsClient interface {
	Recv() (*Switch, error)
	grpc.ClientStream
}

type localWorkerServiceGetSwitchActualsClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceGetSwitchActualsClient) Recv() (*Switch, error) {
	m := new(Switch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *localWorkerServiceClient) SetClock(ctx context.Context, opts ...grpc.CallOption) (LocalWorkerService_SetClockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LocalWorkerService_serviceDesc.Streams[10], "/binkynet.v1.LocalWorkerService/SetClock", opts...)
	if err != nil {
		return nil, err
	}
	x := &localWorkerServiceSetClockClient{stream}
	return x, nil
}

type LocalWorkerService_SetClockClient interface {
	Send(*Clock) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type localWorkerServiceSetClockClient struct {
	grpc.ClientStream
}

func (x *localWorkerServiceSetClockClient) Send(m *Clock) error {
	return x.ClientStream.SendMsg(m)
}

func (x *localWorkerServiceSetClockClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocalWorkerServiceServer is the server API for LocalWorkerService service.
type LocalWorkerServiceServer interface {
	// Gets the features supported by this local worker
	GetFeatures(context.Context, *GetFeaturesRequest) (*Features, error)
	// Describe is used to fetch the a stream if identyable information of a local worker.
	Describe(*DescribeRequest, LocalWorkerService_DescribeServer) error
	// Configure is used to configure a local worker.
	Configure(context.Context, *LocalWorkerConfig) (*Empty, error)
	// DiscoverDevices is used by the netmanager to request a discovery by
	// the local worker.
	// The local worker in turn responds the found devices.
	DiscoverDevices(context.Context, *DiscoverDevicesRequest) (*DiscoverDevicesResult, error)
	// SetPowerRequests is used to change the power state of the local worker.
	SetPowerRequests(LocalWorkerService_SetPowerRequestsServer) error
	// GetPowerActuals is used to fetch a stream of actual power statuses
	// from the local workers, to the network master.
	GetPowerActuals(*GetPowerActualsRequest, LocalWorkerService_GetPowerActualsServer) error
	// SetLocRequests is used to send a stream of loc requests from the network
	// master to the local worker.
	// Note: Loc.actual field is not set.
	SetLocRequests(LocalWorkerService_SetLocRequestsServer) error
	// GetLocActuals is used to send a stream of actual loc statuses from
	// the local worker to the network master.
	// Note: Loc.request field must be set to the latest request.
	GetLocActuals(*GetLocActualsRequest, LocalWorkerService_GetLocActualsServer) error
	// GetSensorActuals is used to send a stream of actual sensor statuses
	// from the local worker to the network master.
	GetSensorActuals(*GetSensorActualsRequest, LocalWorkerService_GetSensorActualsServer) error
	// SetOutputRequests is used to get a stream of output requests from the network
	// master to the local worker.
	SetOutputRequests(LocalWorkerService_SetOutputRequestsServer) error
	// GetOutputActuals is used to send a stream of actual output statuses from
	// the local worker to the network master.
	GetOutputActuals(*GetOutputActualsRequest, LocalWorkerService_GetOutputActualsServer) error
	// SetSwitchRequests is used to get a stream of switch requests from the network
	// master to the local worker.
	SetSwitchRequests(LocalWorkerService_SetSwitchRequestsServer) error
	// GetSwitchActuals is used to send a stream of actual switch statuses from
	// the local worker to the network master.
	GetSwitchActuals(*GetSwitchActualsRequest, LocalWorkerService_GetSwitchActualsServer) error
	// SetClock is used to send a stream of current time of day from the network
	// master to the local worker.
	SetClock(LocalWorkerService_SetClockServer) error
}

// UnimplementedLocalWorkerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLocalWorkerServiceServer struct {
}

func (*UnimplementedLocalWorkerServiceServer) GetFeatures(ctx context.Context, req *GetFeaturesRequest) (*Features, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) Describe(req *DescribeRequest, srv LocalWorkerService_DescribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Describe not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) Configure(ctx context.Context, req *LocalWorkerConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) DiscoverDevices(ctx context.Context, req *DiscoverDevicesRequest) (*DiscoverDevicesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverDevices not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) SetPowerRequests(srv LocalWorkerService_SetPowerRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method SetPowerRequests not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) GetPowerActuals(req *GetPowerActualsRequest, srv LocalWorkerService_GetPowerActualsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPowerActuals not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) SetLocRequests(srv LocalWorkerService_SetLocRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method SetLocRequests not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) GetLocActuals(req *GetLocActualsRequest, srv LocalWorkerService_GetLocActualsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLocActuals not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) GetSensorActuals(req *GetSensorActualsRequest, srv LocalWorkerService_GetSensorActualsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSensorActuals not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) SetOutputRequests(srv LocalWorkerService_SetOutputRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method SetOutputRequests not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) GetOutputActuals(req *GetOutputActualsRequest, srv LocalWorkerService_GetOutputActualsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOutputActuals not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) SetSwitchRequests(srv LocalWorkerService_SetSwitchRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method SetSwitchRequests not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) GetSwitchActuals(req *GetSwitchActualsRequest, srv LocalWorkerService_GetSwitchActualsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSwitchActuals not implemented")
}
func (*UnimplementedLocalWorkerServiceServer) SetClock(srv LocalWorkerService_SetClockServer) error {
	return status.Errorf(codes.Unimplemented, "method SetClock not implemented")
}

func RegisterLocalWorkerServiceServer(s *grpc.Server, srv LocalWorkerServiceServer) {
	s.RegisterService(&_LocalWorkerService_serviceDesc, srv)
}

func _LocalWorkerService_GetFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalWorkerServiceServer).GetFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkynet.v1.LocalWorkerService/GetFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalWorkerServiceServer).GetFeatures(ctx, req.(*GetFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalWorkerService_Describe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DescribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalWorkerServiceServer).Describe(m, &localWorkerServiceDescribeServer{stream})
}

type LocalWorkerService_DescribeServer interface {
	Send(*LocalWorkerInfo) error
	grpc.ServerStream
}

type localWorkerServiceDescribeServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceDescribeServer) Send(m *LocalWorkerInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _LocalWorkerService_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalWorkerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalWorkerServiceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkynet.v1.LocalWorkerService/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalWorkerServiceServer).Configure(ctx, req.(*LocalWorkerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalWorkerService_DiscoverDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalWorkerServiceServer).DiscoverDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkynet.v1.LocalWorkerService/DiscoverDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalWorkerServiceServer).DiscoverDevices(ctx, req.(*DiscoverDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalWorkerService_SetPowerRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalWorkerServiceServer).SetPowerRequests(&localWorkerServiceSetPowerRequestsServer{stream})
}

type LocalWorkerService_SetPowerRequestsServer interface {
	SendAndClose(*Empty) error
	Recv() (*PowerState, error)
	grpc.ServerStream
}

type localWorkerServiceSetPowerRequestsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceSetPowerRequestsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localWorkerServiceSetPowerRequestsServer) Recv() (*PowerState, error) {
	m := new(PowerState)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalWorkerService_GetPowerActuals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPowerActualsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalWorkerServiceServer).GetPowerActuals(m, &localWorkerServiceGetPowerActualsServer{stream})
}

type LocalWorkerService_GetPowerActualsServer interface {
	Send(*PowerState) error
	grpc.ServerStream
}

type localWorkerServiceGetPowerActualsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceGetPowerActualsServer) Send(m *PowerState) error {
	return x.ServerStream.SendMsg(m)
}

func _LocalWorkerService_SetLocRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalWorkerServiceServer).SetLocRequests(&localWorkerServiceSetLocRequestsServer{stream})
}

type LocalWorkerService_SetLocRequestsServer interface {
	SendAndClose(*Empty) error
	Recv() (*Loc, error)
	grpc.ServerStream
}

type localWorkerServiceSetLocRequestsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceSetLocRequestsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localWorkerServiceSetLocRequestsServer) Recv() (*Loc, error) {
	m := new(Loc)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalWorkerService_GetLocActuals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLocActualsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalWorkerServiceServer).GetLocActuals(m, &localWorkerServiceGetLocActualsServer{stream})
}

type LocalWorkerService_GetLocActualsServer interface {
	Send(*Loc) error
	grpc.ServerStream
}

type localWorkerServiceGetLocActualsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceGetLocActualsServer) Send(m *Loc) error {
	return x.ServerStream.SendMsg(m)
}

func _LocalWorkerService_GetSensorActuals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSensorActualsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalWorkerServiceServer).GetSensorActuals(m, &localWorkerServiceGetSensorActualsServer{stream})
}

type LocalWorkerService_GetSensorActualsServer interface {
	Send(*Sensor) error
	grpc.ServerStream
}

type localWorkerServiceGetSensorActualsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceGetSensorActualsServer) Send(m *Sensor) error {
	return x.ServerStream.SendMsg(m)
}

func _LocalWorkerService_SetOutputRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalWorkerServiceServer).SetOutputRequests(&localWorkerServiceSetOutputRequestsServer{stream})
}

type LocalWorkerService_SetOutputRequestsServer interface {
	SendAndClose(*Empty) error
	Recv() (*Output, error)
	grpc.ServerStream
}

type localWorkerServiceSetOutputRequestsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceSetOutputRequestsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localWorkerServiceSetOutputRequestsServer) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalWorkerService_GetOutputActuals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOutputActualsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalWorkerServiceServer).GetOutputActuals(m, &localWorkerServiceGetOutputActualsServer{stream})
}

type LocalWorkerService_GetOutputActualsServer interface {
	Send(*Output) error
	grpc.ServerStream
}

type localWorkerServiceGetOutputActualsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceGetOutputActualsServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

func _LocalWorkerService_SetSwitchRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalWorkerServiceServer).SetSwitchRequests(&localWorkerServiceSetSwitchRequestsServer{stream})
}

type LocalWorkerService_SetSwitchRequestsServer interface {
	SendAndClose(*Empty) error
	Recv() (*Switch, error)
	grpc.ServerStream
}

type localWorkerServiceSetSwitchRequestsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceSetSwitchRequestsServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localWorkerServiceSetSwitchRequestsServer) Recv() (*Switch, error) {
	m := new(Switch)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LocalWorkerService_GetSwitchActuals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSwitchActualsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalWorkerServiceServer).GetSwitchActuals(m, &localWorkerServiceGetSwitchActualsServer{stream})
}

type LocalWorkerService_GetSwitchActualsServer interface {
	Send(*Switch) error
	grpc.ServerStream
}

type localWorkerServiceGetSwitchActualsServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceGetSwitchActualsServer) Send(m *Switch) error {
	return x.ServerStream.SendMsg(m)
}

func _LocalWorkerService_SetClock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LocalWorkerServiceServer).SetClock(&localWorkerServiceSetClockServer{stream})
}

type LocalWorkerService_SetClockServer interface {
	SendAndClose(*Empty) error
	Recv() (*Clock, error)
	grpc.ServerStream
}

type localWorkerServiceSetClockServer struct {
	grpc.ServerStream
}

func (x *localWorkerServiceSetClockServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *localWorkerServiceSetClockServer) Recv() (*Clock, error) {
	m := new(Clock)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LocalWorkerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "binkynet.v1.LocalWorkerService",
	HandlerType: (*LocalWorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeatures",
			Handler:    _LocalWorkerService_GetFeatures_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _LocalWorkerService_Configure_Handler,
		},
		{
			MethodName: "DiscoverDevices",
			Handler:    _LocalWorkerService_DiscoverDevices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Describe",
			Handler:       _LocalWorkerService_Describe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetPowerRequests",
			Handler:       _LocalWorkerService_SetPowerRequests_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPowerActuals",
			Handler:       _LocalWorkerService_GetPowerActuals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetLocRequests",
			Handler:       _LocalWorkerService_SetLocRequests_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetLocActuals",
			Handler:       _LocalWorkerService_GetLocActuals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSensorActuals",
			Handler:       _LocalWorkerService_GetSensorActuals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetOutputRequests",
			Handler:       _LocalWorkerService_SetOutputRequests_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetOutputActuals",
			Handler:       _LocalWorkerService_GetOutputActuals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetSwitchRequests",
			Handler:       _LocalWorkerService_SetSwitchRequests_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetSwitchActuals",
			Handler:       _LocalWorkerService_GetSwitchActuals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetClock",
			Handler:       _LocalWorkerService_SetClock_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "localworker.proto",
}

func (m *GetFeaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFeaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetFeaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *Features) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Features) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Features) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Clock {
		i--
		if m.Clock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Switches {
		i--
		if m.Switches {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Sensors {
		i--
		if m.Sensors {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Outputs {
		i--
		if m.Outputs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Locs {
		i--
		if m.Locs {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Power {
		i--
		if m.Power {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DescribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DescribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DescribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DiscoverDevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoverDevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoverDevicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DiscoverDevicesResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoverDevicesResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DiscoverDevicesResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintLocalworker(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLocalworker(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetPowerActualsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPowerActualsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetPowerActualsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetLocActualsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLocActualsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetLocActualsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetSensorActualsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSensorActualsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSensorActualsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetOutputActualsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOutputActualsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOutputActualsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetSwitchActualsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSwitchActualsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSwitchActualsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocalworker(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocalworker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetFeaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Features) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Power {
		n += 2
	}
	if m.Locs {
		n += 2
	}
	if m.Outputs {
		n += 2
	}
	if m.Sensors {
		n += 2
	}
	if m.Switches {
		n += 2
	}
	if m.Clock {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DescribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoverDevicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoverDevicesResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLocalworker(uint64(l))
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovLocalworker(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPowerActualsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLocActualsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSensorActualsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOutputActualsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSwitchActualsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLocalworker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocalworker(x uint64) (n int) {
	return sovLocalworker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetFeaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalworker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFeaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFeaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLocalworker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalworker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Features) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalworker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Features: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Features: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalworker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Power = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalworker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locs = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalworker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Outputs = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sensors", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalworker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sensors = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Switches", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalworker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Switches = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalworker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Clock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLocalworker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalworker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DescribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalworker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DescribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DescribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLocalworker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalworker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverDevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalworker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverDevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverDevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLocalworker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalworker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverDevicesResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalworker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverDevicesResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverDevicesResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalworker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalworker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalworker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocalworker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocalworker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocalworker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocalworker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalworker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPowerActualsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalworker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPowerActualsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPowerActualsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLocalworker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalworker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLocActualsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalworker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLocActualsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLocActualsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLocalworker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalworker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSensorActualsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalworker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSensorActualsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSensorActualsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLocalworker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalworker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOutputActualsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalworker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOutputActualsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOutputActualsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLocalworker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalworker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSwitchActualsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocalworker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSwitchActualsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSwitchActualsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLocalworker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocalworker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocalworker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocalworker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalworker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocalworker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocalworker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocalworker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocalworker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocalworker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocalworker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocalworker = fmt.Errorf("proto: unexpected end of group")
)
