// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: localworker.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("localworker.proto", fileDescriptor_4d9116c22e0c2dd1) }

var fileDescriptor_4d9116c22e0c2dd1 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0xc9, 0x4f, 0x4e,
	0xcc, 0x29, 0xcf, 0x2f, 0xca, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e,
	0xca, 0xcc, 0xcb, 0xae, 0xcc, 0x4b, 0x2d, 0xd1, 0x2b, 0x33, 0x94, 0xe2, 0x2e, 0xa9, 0x2c, 0x48,
	0x2d, 0x86, 0xc8, 0x18, 0xb9, 0x72, 0x09, 0xf9, 0x80, 0x94, 0x87, 0x83, 0x95, 0x07, 0xa7, 0x16,
	0x95, 0x65, 0x26, 0xa7, 0x0a, 0xe9, 0x73, 0xb1, 0x06, 0xa5, 0x16, 0xa7, 0x96, 0x08, 0x09, 0xe9,
	0x21, 0xe9, 0xd4, 0x73, 0xcd, 0x2d, 0x28, 0xa9, 0x94, 0xc2, 0x22, 0xe6, 0xe4, 0x79, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x10, 0xa5,
	0x92, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0x53, 0xaf, 0xef, 0x04,
	0x62, 0xf8, 0xa5, 0x96, 0xe8, 0x27, 0x16, 0x64, 0x16, 0xeb, 0x97, 0x19, 0xae, 0x62, 0x12, 0x80,
	0x09, 0xe9, 0x39, 0x16, 0x64, 0x16, 0xeb, 0x85, 0x19, 0x26, 0xb1, 0x81, 0x1d, 0x66, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x99, 0x87, 0xc9, 0x72, 0xc7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LocalWorkerServiceClient is the client API for LocalWorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocalWorkerServiceClient interface {
	// Reset the local worker
	Reset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type localWorkerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLocalWorkerServiceClient(cc *grpc.ClientConn) LocalWorkerServiceClient {
	return &localWorkerServiceClient{cc}
}

func (c *localWorkerServiceClient) Reset(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/binkynet.v1.LocalWorkerService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalWorkerServiceServer is the server API for LocalWorkerService service.
type LocalWorkerServiceServer interface {
	// Reset the local worker
	Reset(context.Context, *Empty) (*Empty, error)
}

// UnimplementedLocalWorkerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLocalWorkerServiceServer struct {
}

func (*UnimplementedLocalWorkerServiceServer) Reset(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}

func RegisterLocalWorkerServiceServer(s *grpc.Server, srv LocalWorkerServiceServer) {
	s.RegisterService(&_LocalWorkerService_serviceDesc, srv)
}

func _LocalWorkerService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalWorkerServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binkynet.v1.LocalWorkerService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalWorkerServiceServer).Reset(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocalWorkerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "binkynet.v1.LocalWorkerService",
	HandlerType: (*LocalWorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reset",
			Handler:    _LocalWorkerService_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localworker.proto",
}
